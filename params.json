{"name":"Cast env","tagline":"CastEnv can retrieve and cast basic types from your ENV for you.","body":"# CastEnv\r\n\r\nCastEnv can retrieve and cast basic types from your ENV for you.\r\n\r\nCurrently it handles Integers and Booleans.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'cast_env'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install cast_env\r\n\r\n## Usage\r\n\r\nConfigure the type you'd like CastEnv to cast a given ENV\r\nvalue for you to.  Booleans are considered true if the original\r\nENV value is the string 'true' or 'TRUE', otherwise they are false.\r\n\r\n```ruby\r\nCastEnv.casts :spam_checks_enabled, :Boolean\r\nCastEnv.casts :max_projects, :Integer\r\n```\r\n\r\nFetch those values:\r\n\r\n```ruby\r\nENV['SPAM_CHECKS_ENABLED'] = 'true'\r\nCastEnv[:spam_checks_enabled] # => true\r\nCastEnv[:spam_checks_enabled].class # => TrueClass\r\n\r\nENV['MAX_PROJECTS'] = '42'\r\nCastEnv[:max_projects] # => 42\r\nCastEnv[:max_projects].class # => Fixnum\r\n```\r\n\r\nNote that if you try and grab a value that doesn't exist, you'll get\r\na `KeyError` exception.  Since we are casting data, it makes better sense\r\nto throw an exception than assume a potentially harmful value like '' getting\r\nconverted to 0.  Better to fail fast than fail weird here.\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it ( http://github.com/bemurphy/cast_env/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}